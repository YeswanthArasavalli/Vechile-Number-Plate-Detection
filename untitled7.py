# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xVxEpyv7rUldpjJ-m1lFioy5aMlao5Mk
"""

!pip install pytesseract
from google.colab.patches import cv2_imshow

import numpy as np
import cv2
import  imutils

# Read the image file
image = cv2.imread('car.jpeg')

# Resize the image - change width to 500
image = imutils.resize(image, width=500)

# Display the original image
cv2_imshow(image)

# RGB to Gray scale conversion
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(gray)

# Noise removal with iterative bilateral filter(removes noise while preserving edges)
gray = cv2.bilateralFilter(gray, 11, 17, 17)
cv2_imshow(gray)

# Find Edges of the grayscale image
edged = cv2.Canny(gray, 170, 200)
cv2_imshow(edged)

# Find contours based on Edges
cnts, hier = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
cnts=sorted(cnts, key = cv2.contourArea, reverse = True)[:30] #sort contours based on their area keeping minimum required area as '30' (anything smaller than this will not be considered)
NumberPlateCnt = None #we currently have no Number plate contour

# loop over our contours to find the best possible approximate contour of number plate
count = 0
for c in cnts:
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
        if len(approx) == 4:  # Select the contour with 4 corners
            NumberPlateCnt = approx #This is our approx Number Plate Contour
            break


# Drawing the selected contour on the original image
cv2.drawContours(image, [NumberPlateCnt], -1, (0,255,0), 3)
cv2_imshow(image)

cv2.waitKey(0) #Wait for user input before closing the images displayed